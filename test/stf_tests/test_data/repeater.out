<T> <k> @deparseField ( ethernet , dstAddr ) ~> @deparseFields ( ethernet , srcAddr : 48 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) ~> @deparseNext ( ListItem ( ipv4 ) ) ~> @txenPacket ~> @nextPacket </k> <headers> <header> <name> %standard_metadata_t </name> <opts> .Map </opts> <fields> egress_spec : 32 ( .FieldMods ) ;  ( egress_spec : 32 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> ingress_metadata_t </name> <opts> "$fixed_width" |-> 44 </opts> <fields> vrf : 12 ( .FieldMods ) ;  ( bd : 16 ( .FieldMods ) ;  ( nexthop_index : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> <header> <name> ipv4_t </name> <opts> "$fixed_width" |-> 160 </opts> <fields> version : 4 ( .FieldMods ) ;  ( ihl : 4 ( .FieldMods ) ;  ( diffserv : 8 ( .FieldMods ) ;  ( totalLen : 16 ( .FieldMods ) ;  ( identification : 16 ( .FieldMods ) ;  ( flags : 3 ( .FieldMods ) ;  ( fragOffset : 13 ( .FieldMods ) ;  ( ttl : 8 ( .FieldMods ) ;  ( protocol : 8 ( .FieldMods ) ;  ( hdrChecksum : 16 ( .FieldMods ) ;  ( srcAddr : 32 ( .FieldMods ) ;  ( dstAddr : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) ) ) ) </fields> </header> <header> <name> ethernet_t </name> <opts> "$fixed_width" |-> 112 </opts> <fields> dstAddr : 48 ( .FieldMods ) ;  ( srcAddr : 48 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> </headers> <arrays> .Map </arrays> <fieldLists> <fieldList> <name> ipv4_checksum_list </name> <fields> ( ipv4 . version ) ;  ( ( ipv4 . ihl ) ;  ( ( ipv4 . diffserv ) ;  ( ( ipv4 . totalLen ) ;  ( ( ipv4 . identification ) ;  ( ( ipv4 . flags ) ;  ( ( ipv4 . fragOffset ) ;  ( ( ipv4 . ttl ) ;  ( ( ipv4 . protocol ) ;  ( ( ipv4 . srcAddr ) ;  ( ( ipv4 . dstAddr ) ;  .FieldListEntryItems ) ) ) ) ) ) ) ) ) ) </fields> </fieldList> </fieldLists> <fieldListCalcs> <fieldListCalc> <name> ipv4_checksum </name> <fLists> ListItem ( ipv4_checksum_list ) </fLists> <algorithm> csum16 </algorithm> <outWidth> 16 </outWidth> <fListIndex> 0 </fListIndex> </fieldListCalc> </fieldListCalcs> <calcFields> <calcField> <fieldRef> ipv4 . hdrChecksum </fieldRef> <updates> ListItem ( update ipv4_checksum if ( true ) ; ) </updates> <verifies> ListItem ( verify ipv4_checksum if ( true ) ; ) </verifies> </calcField> </calcFields> <instances> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @val ( 2 , 32 , false ) egress_spec |-> @val ( 1 , 32 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> ingress_metadata_t </typeName> <name> ingress_metadata </name> <fieldVals> bd |-> @val ( 10 , 16 , false ) nexthop_index |-> @val ( 1 , 16 , false ) vrf |-> @val ( 30 , 12 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> ipv4 </name> <fieldVals> ttl |-> @val ( 63 , 8 , false ) srcAddr |-> @val ( 16909060 , 32 , false ) hdrChecksum |-> @val ( 27733 , 16 , false ) version |-> @val ( 4 , 4 , false ) flags |-> @val ( 0 , 3 , false ) diffserv |-> @val ( 0 , 8 , false ) identification |-> @val ( 0 , 16 , false ) totalLen |-> @val ( 44 , 16 , false ) protocol |-> @val ( 17 , 8 , false ) fragOffset |-> @val ( 101 , 13 , false ) ihl |-> @val ( 5 , 4 , false ) dstAddr |-> @val ( 167772162 , 32 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> etherType |-> @val ( 2048 , 16 , false ) srcAddr |-> @val ( 1103823438081 , 48 , false ) dstAddr |-> @val ( 4311810305 , 48 , false ) </fieldVals> </instance> </instances> <initInstances> <instances>-fragment <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @undef egress_spec |-> @undef </fieldVals> </instance> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> ingress_metadata_t </typeName> <name> ingress_metadata </name> <fieldVals> bd |-> @val ( 0 , 16 , false ) nexthop_index |-> @val ( 0 , 16 , false ) vrf |-> @val ( 0 , 12 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> .Map </fieldVals> </instance> </instances>-fragment </initInstances> <initArrays> .Map </initArrays> <parserStates> <state> <name> parse_ipv4 </name> <body> ( extract ( ipv4 ) ; .ExtractOrSetStatements ) return ingress ; </body> </state> <state> <name> parse_ethernet </name> <body> ( extract ( ethernet ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( 0x0800 , .ValueOrMaskeds ) : parse_ipv4 ;  ( default : ingress ;  .CaseEntries ) } </body> </state> <state> <name> start </name> <body> .ExtractOrSetStatements return parse_ethernet ; </body> </state> </parserStates> <valueSets> .ValueSetCellBag </valueSets> <exceptionHandlers> .ExceptionHandlerCellBag </exceptionHandlers> <handledExceptions> .Set </handledExceptions> <statefuls> .StatefulCellBag </statefuls> <tableDirects> .Map </tableDirects> <actions> <action> <name> rewrite_src_dst_mac </name> <params> smac , ( dmac , .ParamList ) </params> <body> modify_field ( ( ethernet . srcAddr ) , ( smac , .Args ) ) ;  ( modify_field ( ( ethernet . dstAddr ) , ( dmac , .Args ) ) ;  .ActionStatements ) </body> </action> <action> <name> set_egress_details </name> <params> egress_spec , .ParamList </params> <body> modify_field ( ( standard_metadata . egress_spec ) , ( egress_spec , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> fib_hit_nexthop </name> <params> nexthop_index , .ParamList </params> <body> modify_field ( ( ingress_metadata . nexthop_index ) , ( nexthop_index , .Args ) ) ;  ( subtract_from_field ( ( ipv4 . ttl ) , ( 1 , .Args ) ) ;  .ActionStatements ) </body> </action> <action> <name> set_vrf </name> <params> vrf , .ParamList </params> <body> modify_field ( ( ingress_metadata . vrf ) , ( vrf , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> set_bd </name> <params> bd , .ParamList </params> <body> modify_field ( ( ingress_metadata . bd ) , ( bd , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> on_miss </name> <params> .ParamList </params> <body> .ActionStatements </body> </action> </actions> <actionProfiles> .ActionProfileCellBag </actionProfiles> <actionSelectors> .ActionSelectorCellBag </actionSelectors> <tables> <table> <name> rewrite_mac </name> <reads> ( ingress_metadata . nexthop_index ) : exact ;  .FieldMatchs </reads> <acts> actions { on_miss ;  ( rewrite_src_dst_mac ;  .ActionNameItems ) } </acts> <opts> size : 32768 ;  .TableOptionals </opts> <rules> ListItem ( $rule ( 9 , $ctr ( ListItem ( @val ( 1 , 0 , false ) ) ) , @call ( rewrite_src_dst_mac , $resolved ( ListItem ( @val ( 1103823438081 , 0 , false ) ) ListItem ( @val ( 4311810305 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 11 , $ctr ( ListItem ( @val ( 2 , 0 , false ) ) ) , @call ( rewrite_src_dst_mac , $resolved ( ListItem ( @val ( 1108135248386 , 0 , false ) ) ListItem ( @val ( 8623620610 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 13 , $ctr ( ListItem ( @val ( 3 , 0 , false ) ) ) , @call ( rewrite_src_dst_mac , $resolved ( ListItem ( @val ( 1112447058691 , 0 , false ) ) ListItem ( @val ( 12935430915 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 15 , $ctr ( ListItem ( @val ( 4 , 0 , false ) ) ) , @call ( rewrite_src_dst_mac , $resolved ( ListItem ( @val ( 1116758868996 , 0 , false ) ) ListItem ( @val ( 17247241220 , 0 , false ) ) ) ) ) ) </rules> <default> @call ( on_miss , $resolved ( .List ) ) </default> </table> <table> <name> nexthop </name> <reads> ( ingress_metadata . nexthop_index ) : exact ;  .FieldMatchs </reads> <acts> actions { on_miss ;  ( set_egress_details ;  .ActionNameItems ) } </acts> <opts> size : 32768 ;  .TableOptionals </opts> <rules> ListItem ( $rule ( 8 , $ctr ( ListItem ( @val ( 1 , 0 , false ) ) ) , @call ( set_egress_details , $resolved ( ListItem ( @val ( 1 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 10 , $ctr ( ListItem ( @val ( 2 , 0 , false ) ) ) , @call ( set_egress_details , $resolved ( ListItem ( @val ( 2 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 12 , $ctr ( ListItem ( @val ( 3 , 0 , false ) ) ) , @call ( set_egress_details , $resolved ( ListItem ( @val ( 3 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 14 , $ctr ( ListItem ( @val ( 4 , 0 , false ) ) ) , @call ( set_egress_details , $resolved ( ListItem ( @val ( 4 , 0 , false ) ) ) ) ) ) </rules> <default> @call ( on_miss , $resolved ( .List ) ) </default> </table> <table> <name> ipv4_fib_lpm </name> <reads> ( ingress_metadata . vrf ) : exact ;  ( ( ipv4 . dstAddr ) : lpm ;  .FieldMatchs ) </reads> <acts> actions { on_miss ;  ( fib_hit_nexthop ;  .ActionNameItems ) } </acts> <opts> size : 16384 ;  .TableOptionals </opts> <rules> ListItem ( $rule ( 6 , $ctr ( ListItem ( @val ( 30 , 0 , false ) ) ListItem ( $pair ( @val ( 3232235520 , 32 , false ) , @val ( 240 , 32 , false ) ) ) ) , @call ( fib_hit_nexthop , $resolved ( ListItem ( @val ( 1 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 7 , $ctr ( ListItem ( @val ( 30 , 0 , false ) ) ListItem ( $pair ( @val ( 167772160 , 32 , false ) , @val ( 192 , 32 , false ) ) ) ) , @call ( fib_hit_nexthop , $resolved ( ListItem ( @val ( 3 , 0 , false ) ) ) ) ) ) </rules> <default> @call ( on_miss , $resolved ( .List ) ) </default> </table> <table> <name> ipv4_fib </name> <reads> ( ingress_metadata . vrf ) : exact ;  ( ( ipv4 . dstAddr ) : exact ;  .FieldMatchs ) </reads> <acts> actions { on_miss ;  ( fib_hit_nexthop ;  .ActionNameItems ) } </acts> <opts> size : 131072 ;  .TableOptionals </opts> <rules> .List </rules> <default> @call ( on_miss , $resolved ( .List ) ) </default> </table> <table> <name> bd </name> <reads> ( ingress_metadata . bd ) : exact ;  .FieldMatchs </reads> <acts> actions { set_vrf ;  .ActionNameItems } </acts> <opts> size : 65536 ;  .TableOptionals </opts> <rules> ListItem ( $rule ( 4 , $ctr ( ListItem ( @val ( 10 , 0 , false ) ) ) , @call ( set_vrf , $resolved ( ListItem ( @val ( 30 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 5 , $ctr ( ListItem ( @val ( 20 , 0 , false ) ) ) , @call ( set_vrf , $resolved ( ListItem ( @val ( 30 , 0 , false ) ) ) ) ) ) </rules> <default> . </default> </table> <table> <name> port_mapping </name> <reads> ( standard_metadata . ingress_port ) : exact ;  .FieldMatchs </reads> <acts> actions { set_bd ;  .ActionNameItems } </acts> <opts> size : 32768 ;  .TableOptionals </opts> <rules> ListItem ( $rule ( 0 , $ctr ( ListItem ( @val ( 1 , 0 , false ) ) ) , @call ( set_bd , $resolved ( ListItem ( @val ( 10 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 1 , $ctr ( ListItem ( @val ( 2 , 0 , false ) ) ) , @call ( set_bd , $resolved ( ListItem ( @val ( 10 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 2 , $ctr ( ListItem ( @val ( 3 , 0 , false ) ) ) , @call ( set_bd , $resolved ( ListItem ( @val ( 20 , 0 , false ) ) ) ) ) ) ListItem ( $rule ( 3 , $ctr ( ListItem ( @val ( 4 , 0 , false ) ) ) , @call ( set_bd , $resolved ( ListItem ( @val ( 20 , 0 , false ) ) ) ) ) ) </rules> <default> . </default> </table> </tables> <controlFlows> <control> <name> egress </name> <body> apply ( rewrite_mac ) { .HitMissCases }  .ControlStatements </body> </control> <control> <name> ingress </name> <body> ( if ( valid ( ipv4 ) ) { apply ( port_mapping ) { .HitMissCases }  ( apply ( bd ) { .HitMissCases }  ( apply ( ipv4_fib ) { ( on_miss { apply ( ipv4_fib_lpm ) { .HitMissCases }  .ControlStatements } )  .ActionCases }  ( apply ( nexthop ) { .HitMissCases }  .ControlStatements ) ) ) } else { .ControlStatements } )  .ControlStatements </body> </control> </controlFlows> <cfset> SetItem ( ingress ) SetItem ( egress ) </cfset> <calcFieldSet> SetItem ( ipv4 . hdrChecksum ) </calcFieldSet> <ctx> <frameStack> .List </frameStack> <crnt> "$rule" |-> . "$table" |-> . "$action" |-> rewrite_src_dst_mac "$miss" |-> false </crnt> </ctx> <packet> "10101010101010101010101010101010101010101010101010111011101110111011101110111011101110111011101100001000000000000100010100000000000000000010110000000000000000000000000001100101010000000001000101101100010101010000000100000010000000110000010000001010000000000000000000000010000000000110010000000000011001010000000000010000000000000000000000000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111" </packet> <packetout> .List </packetout> <parser> <graph> <onpath> .Set </onpath> <marked> <mstates> SetItem ( parse_ethernet ) SetItem ( start ) SetItem ( parse_ipv4 ) </mstates> <mheaders> SetItem ( ipv4 ) SetItem ( ethernet ) </mheaders> </marked> <dporder> ListItem ( ethernet ) ListItem ( ipv4 ) </dporder> </graph> <pctx> <index> 272 </index> <lastExt> ipv4 </lastExt> <varWidth> . </varWidth> <packetSize> @val ( 58 , 0 , false ) </packetSize> </pctx> </parser> <buffer> <in> ListItem ( $packet ( "11001100110011001100110011001100110011001100110011011101110111011101110111011101110111011101110100001000000000000100010100000000000000000010110000000000000000000000000001100101010000000001000110110100101011000000000100000010000000110000010011000000101010000000000100000010000000000110010000000000011001010000000000010000000000000000000000000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111" , 4 ) ) </in> <out> .List </out> </buffer> </T>
