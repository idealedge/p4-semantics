<T> <k> @nextPacket </k> <headers> <header> <name> %standard_metadata_t </name> <opts> .Map </opts> <fields> egress_spec : 32 ( .FieldMods ) ;  ( egress_spec : 32 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> ethernet_t </name> <opts> "$fixed_width" |-> 48 </opts> <fields> dstAddr : 48 ( .FieldMods ) ;  .FieldDecs </fields> </header> </headers> <arrays> .Map </arrays> <fieldLists> .FieldListCellBag </fieldLists> <fieldListCalcs> .FieldListCalcCellBag </fieldListCalcs> <calcFields> .CalcFieldCellBag </calcFields> <instances> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @undef egress_spec |-> @undef </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> .Map </fieldVals> </instance> </instances> <initInstances> <instances>-fragment <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @undef egress_spec |-> @undef </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> .Map </fieldVals> </instance> </instances>-fragment </initInstances> <initArrays> .Map </initArrays> <parserStates> <state> <name> parse_ethernet </name> <body> ( extract ( ethernet ) ; .ExtractOrSetStatements ) return ingress ; </body> </state> <state> <name> start </name> <body> .ExtractOrSetStatements return parse_ethernet ; </body> </state> </parserStates> <valueSets> .ValueSetCellBag </valueSets> <exceptionHandlers> .ExceptionHandlerCellBag </exceptionHandlers> <handledExceptions> .Set </handledExceptions> <statefuls> <stateful> <stype> $counter </stype> <name> cntDum </name> <opts> "$instant_count" |-> 70000 "$table" |-> tab1 "$signed" |-> false "$binding" |-> $static "$counter_type" |-> packets "$saturating" |-> false "$min_width" |-> 64 </opts> <vals> .Map </vals> <width> 0 </width> </stateful> </statefuls> <tableDirects> .Map </tableDirects> <actions> <action> <name> act </name> <params> port , ( idx , .ParamList ) </params> <body> modify_field ( ( standard_metadata . egress_spec ) , ( port , .Args ) ) ;  ( count ( cntDum , ( idx , .Args ) ) ;  .ActionStatements ) </body> </action> </actions> <actionProfiles> .ActionProfileCellBag </actionProfiles> <actionSelectors> .ActionSelectorCellBag </actionSelectors> <tables> <table> <name> tab1 </name> <reads> ( ethernet . dstAddr ) : exact ;  .FieldMatchs </reads> <acts> actions { act ;  .ActionNameItems } </acts> <opts> size : 160000 ;  .TableOptionals </opts> <rules> .List </rules> <default> . </default> </table> </tables> <controlFlows> <control> <name> egress </name> <body> .ControlStatements </body> </control> <control> <name> ingress </name> <body> apply ( tab1 ) { .HitMissCases }  .ControlStatements </body> </control> </controlFlows> <cfset> SetItem ( ingress ) SetItem ( egress ) </cfset> <calcFieldSet> .Set </calcFieldSet> <ctx> <frameStack> .List </frameStack> <crnt> .Map </crnt> </ctx> <packet> . </packet> <packetout> .List </packetout> <parser> <graph> <onpath> .Set </onpath> <marked> <mstates> SetItem ( parse_ethernet ) SetItem ( start ) </mstates> <mheaders> SetItem ( ethernet ) </mheaders> </marked> <dporder> ListItem ( ethernet ) </dporder> </graph> <pctx> <index> 0 </index> <lastExt> . </lastExt> <varWidth> . </varWidth> <packetSize> . </packetSize> </pctx> </parser> <buffer> <in> .List </in> <out> .List </out> </buffer> </T>
