<T> <k> @nextPacket </k> <headers> <header> <name> %standard_metadata_t </name> <opts> .Map </opts> <fields> egress_spec : 32 ( .FieldMods ) ;  ( egress_spec : 32 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> payload_t </name> <opts> "$fixed_width" |-> 8 </opts> <fields> data : 8 ( .FieldMods ) ;  .FieldDecs </fields> </header> <header> <name> input_port_hdr_t </name> <opts> "$fixed_width" |-> 16 </opts> <fields> port : 16 ( .FieldMods ) ;  .FieldDecs </fields> </header> <header> <name> genv_opt_C_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> optClass : 16 ( .FieldMods ) ;  ( optType : 8 ( .FieldMods ) ;  ( reserved : 3 ( .FieldMods ) ;  ( optLen : 5 ( .FieldMods ) ;  ( data : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> genv_opt_B_t </name> <opts> "$fixed_width" |-> 96 </opts> <fields> optClass : 16 ( .FieldMods ) ;  ( optType : 8 ( .FieldMods ) ;  ( reserved : 3 ( .FieldMods ) ;  ( optLen : 5 ( .FieldMods ) ;  ( data : 64 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> genv_opt_A_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> optClass : 16 ( .FieldMods ) ;  ( optType : 8 ( .FieldMods ) ;  ( reserved : 3 ( .FieldMods ) ;  ( optLen : 5 ( .FieldMods ) ;  ( data : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> genv_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> ver : 2 ( .FieldMods ) ;  ( optLen : 6 ( .FieldMods ) ;  ( oam : 1 ( .FieldMods ) ;  ( critical : 1 ( .FieldMods ) ;  ( reserved : 6 ( .FieldMods ) ;  ( protoType : 16 ( .FieldMods ) ;  ( vni : 24 ( .FieldMods ) ;  ( reserved2 : 8 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) </fields> </header> <header> <name> nsh_context_t </name> <opts> "$fixed_width" |-> 128 </opts> <fields> network_platform : 32 ( .FieldMods ) ;  ( network_shared : 32 ( .FieldMods ) ;  ( service_platform : 32 ( .FieldMods ) ;  ( service_shared : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> nsh_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> oam : 1 ( .FieldMods ) ;  ( context : 1 ( .FieldMods ) ;  ( flags : 6 ( .FieldMods ) ;  ( reserved : 8 ( .FieldMods ) ;  ( protoType : 16 ( .FieldMods ) ;  ( spath : 24 ( .FieldMods ) ;  ( sindex : 8 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) </fields> </header> <header> <name> vxlan_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> flags : 8 ( .FieldMods ) ;  ( reserved : 24 ( .FieldMods ) ;  ( vni : 24 ( .FieldMods ) ;  ( reserved2 : 8 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> eompls_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> zero : 4 ( .FieldMods ) ;  ( reserved : 12 ( .FieldMods ) ;  ( seqNo : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> <header> <name> arp_rarp_ipv4_t </name> <opts> "$fixed_width" |-> 160 </opts> <fields> srcHwAddr : 48 ( .FieldMods ) ;  ( srcProtoAddr : 32 ( .FieldMods ) ;  ( dstHwAddr : 48 ( .FieldMods ) ;  ( dstProtoAddr : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> arp_rarp_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> hwType : 16 ( .FieldMods ) ;  ( protoType : 16 ( .FieldMods ) ;  ( hwAddrLen : 8 ( .FieldMods ) ;  ( protoAddrLen : 8 ( .FieldMods ) ;  ( opcode : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> ipsec_ah_t </name> <opts> "$fixed_width" |-> 96 </opts> <fields> nextHdr : 8 ( .FieldMods ) ;  ( length_ : 8 ( .FieldMods ) ;  ( zero : 16 ( .FieldMods ) ;  ( spi : 32 ( .FieldMods ) ;  ( seqNo : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> ipsec_esp_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> spi : 32 ( .FieldMods ) ;  ( seqNo : 32 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> erspan_header_v2_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> version : 4 ( .FieldMods ) ;  ( vlan : 12 ( .FieldMods ) ;  ( priority : 6 ( .FieldMods ) ;  ( span_id : 10 ( .FieldMods ) ;  ( unknown7 : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> erspan_header_v1_t </name> <opts> "$fixed_width" |-> 48 </opts> <fields> version : 4 ( .FieldMods ) ;  ( vlan : 12 ( .FieldMods ) ;  ( priority : 6 ( .FieldMods ) ;  ( span_id : 10 ( .FieldMods ) ;  ( direction : 8 ( .FieldMods ) ;  ( truncated : 8 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) </fields> </header> <header> <name> nvgre_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> tni : 24 ( .FieldMods ) ;  ( reserved : 8 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> gre_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> C : 1 ( .FieldMods ) ;  ( R : 1 ( .FieldMods ) ;  ( K : 1 ( .FieldMods ) ;  ( S : 1 ( .FieldMods ) ;  ( s : 1 ( .FieldMods ) ;  ( recurse : 3 ( .FieldMods ) ;  ( flags : 5 ( .FieldMods ) ;  ( ver : 3 ( .FieldMods ) ;  ( proto : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) </fields> </header> <header> <name> sctp_t </name> <opts> "$fixed_width" |-> 96 </opts> <fields> srcPort : 16 ( .FieldMods ) ;  ( dstPort : 16 ( .FieldMods ) ;  ( verifTag : 32 ( .FieldMods ) ;  ( checksum : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> udp_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> srcPort : 16 ( .FieldMods ) ;  ( dstPort : 16 ( .FieldMods ) ;  ( length_ : 16 ( .FieldMods ) ;  ( checksum : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> tcp_t </name> <opts> "$fixed_width" |-> 160 </opts> <fields> srcPort : 16 ( .FieldMods ) ;  ( dstPort : 16 ( .FieldMods ) ;  ( seqNo : 32 ( .FieldMods ) ;  ( ackNo : 32 ( .FieldMods ) ;  ( dataOffset : 4 ( .FieldMods ) ;  ( res : 4 ( .FieldMods ) ;  ( flags : 8 ( .FieldMods ) ;  ( window : 16 ( .FieldMods ) ;  ( checksum : 16 ( .FieldMods ) ;  ( urgentPtr : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) ) </fields> </header> <header> <name> icmpv6_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> type_ : 8 ( .FieldMods ) ;  ( code : 8 ( .FieldMods ) ;  ( hdrChecksum : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> <header> <name> icmp_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> type_ : 8 ( .FieldMods ) ;  ( code : 8 ( .FieldMods ) ;  ( hdrChecksum : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> <header> <name> ipv6_t </name> <opts> "$fixed_width" |-> 320 </opts> <fields> version : 4 ( .FieldMods ) ;  ( trafficClass : 8 ( .FieldMods ) ;  ( flowLabel : 20 ( .FieldMods ) ;  ( payloadLen : 16 ( .FieldMods ) ;  ( nextHdr : 8 ( .FieldMods ) ;  ( hopLimit : 8 ( .FieldMods ) ;  ( srcAddr : 128 ( .FieldMods ) ;  ( dstAddr : 128 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) </fields> </header> <header> <name> ipv4_t </name> <opts> "$fixed_width" |-> 160 </opts> <fields> version : 4 ( .FieldMods ) ;  ( ihl : 4 ( .FieldMods ) ;  ( diffserv : 8 ( .FieldMods ) ;  ( totalLen : 16 ( .FieldMods ) ;  ( identification : 16 ( .FieldMods ) ;  ( flags : 3 ( .FieldMods ) ;  ( fragOffset : 13 ( .FieldMods ) ;  ( ttl : 8 ( .FieldMods ) ;  ( protocol : 8 ( .FieldMods ) ;  ( hdrChecksum : 16 ( .FieldMods ) ;  ( srcAddr : 32 ( .FieldMods ) ;  ( dstAddr : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) ) ) ) </fields> </header> <header> <name> mpls_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> label : 20 ( .FieldMods ) ;  ( tc : 3 ( .FieldMods ) ;  ( bos : 1 ( .FieldMods ) ;  ( ttl : 8 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> ieee802_1ah_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> pcp : 3 ( .FieldMods ) ;  ( dei : 1 ( .FieldMods ) ;  ( uca : 1 ( .FieldMods ) ;  ( reserved : 3 ( .FieldMods ) ;  ( i_sid : 24 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> vlan_tag_5b_t </name> <opts> "$fixed_width" |-> 40 </opts> <fields> pcp : 3 ( .FieldMods ) ;  ( cfi : 1 ( .FieldMods ) ;  ( vid : 20 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> vlan_tag_3b_t </name> <opts> "$fixed_width" |-> 24 </opts> <fields> pcp : 3 ( .FieldMods ) ;  ( cfi : 1 ( .FieldMods ) ;  ( vid : 4 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> vlan_tag_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> pcp : 3 ( .FieldMods ) ;  ( cfi : 1 ( .FieldMods ) ;  ( vid : 12 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> cpu_header_t </name> <opts> "$fixed_width" |-> 112 </opts> <fields> qid : 3 ( .FieldMods ) ;  ( pad : 1 ( .FieldMods ) ;  ( reason_code : 12 ( .FieldMods ) ;  ( rxhash : 16 ( .FieldMods ) ;  ( bridge_domain : 16 ( .FieldMods ) ;  ( ingress_lif : 16 ( .FieldMods ) ;  ( egress_lif : 16 ( .FieldMods ) ;  ( lu_bypass_ingress : 1 ( .FieldMods ) ;  ( lu_bypass_egress : 1 ( .FieldMods ) ;  ( pad1 : 14 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) ) ) </fields> </header> <header> <name> fcoe_header_t </name> <opts> "$fixed_width" |-> 176 </opts> <fields> version : 4 ( .FieldMods ) ;  ( type_ : 4 ( .FieldMods ) ;  ( sof : 8 ( .FieldMods ) ;  ( rsvd1 : 32 ( .FieldMods ) ;  ( ts_upper : 32 ( .FieldMods ) ;  ( ts_lower : 32 ( .FieldMods ) ;  ( size_ : 32 ( .FieldMods ) ;  ( eof : 8 ( .FieldMods ) ;  ( rsvd2 : 24 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) </fields> </header> <header> <name> roce_v2_header_t </name> <opts> "$fixed_width" |-> 96 </opts> <fields> ib_bth : 96 ( .FieldMods ) ;  .FieldDecs </fields> </header> <header> <name> roce_header_t </name> <opts> "$fixed_width" |-> 416 </opts> <fields> ib_grh : 320 ( .FieldMods ) ;  ( ib_bth : 96 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> snap_header_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> dsap : 8 ( .FieldMods ) ;  ( ssap : 8 ( .FieldMods ) ;  ( control_ : 8 ( .FieldMods ) ;  ( oui : 24 ( .FieldMods ) ;  ( type_ : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) ) </fields> </header> <header> <name> ethernet_t </name> <opts> "$fixed_width" |-> 112 </opts> <fields> dstAddr : 48 ( .FieldMods ) ;  ( srcAddr : 48 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> </headers> <arrays> vlan_tag_3b |-> $array ( 2 , 0 , -1 ) mpls |-> $array ( 3 , 1 , 0 ) vlan_tag_5b |-> $array ( 2 , 0 , -1 ) vlan_tag_ |-> $array ( 2 , 2 , 1 ) </arrays> <fieldLists> <fieldList> <name> inner_ipv4_checksum_list </name> <fields> ( inner_ipv4 . version ) ;  ( ( inner_ipv4 . ihl ) ;  ( ( inner_ipv4 . diffserv ) ;  ( ( inner_ipv4 . totalLen ) ;  ( ( inner_ipv4 . identification ) ;  ( ( inner_ipv4 . flags ) ;  ( ( inner_ipv4 . fragOffset ) ;  ( ( inner_ipv4 . ttl ) ;  ( ( inner_ipv4 . protocol ) ;  ( ( inner_ipv4 . srcAddr ) ;  ( ( inner_ipv4 . dstAddr ) ;  .FieldListEntryItems ) ) ) ) ) ) ) ) ) ) </fields> </fieldList> <fieldList> <name> ipv4_checksum_list </name> <fields> ( ipv4 . version ) ;  ( ( ipv4 . ihl ) ;  ( ( ipv4 . diffserv ) ;  ( ( ipv4 . totalLen ) ;  ( ( ipv4 . identification ) ;  ( ( ipv4 . flags ) ;  ( ( ipv4 . fragOffset ) ;  ( ( ipv4 . ttl ) ;  ( ( ipv4 . protocol ) ;  ( ( ipv4 . srcAddr ) ;  ( ( ipv4 . dstAddr ) ;  .FieldListEntryItems ) ) ) ) ) ) ) ) ) ) </fields> </fieldList> </fieldLists> <fieldListCalcs> <fieldListCalc> <name> inner_ipv4_checksum </name> <fLists> ListItem ( inner_ipv4_checksum_list ) </fLists> <algorithm> csum16 </algorithm> <outWidth> 16 </outWidth> <fListIndex> 0 </fListIndex> </fieldListCalc> <fieldListCalc> <name> ipv4_checksum </name> <fLists> ListItem ( ipv4_checksum_list ) </fLists> <algorithm> csum16 </algorithm> <outWidth> 16 </outWidth> <fListIndex> 0 </fListIndex> </fieldListCalc> </fieldListCalcs> <calcFields> <calcField> <fieldRef> inner_ipv4 . hdrChecksum </fieldRef> <updates> ListItem ( update inner_ipv4_checksum if ( valid ( ipv4 ) ) ; ) </updates> <verifies> ListItem ( verify inner_ipv4_checksum if ( valid ( ipv4 ) ) ; ) </verifies> </calcField> <calcField> <fieldRef> ipv4 . hdrChecksum </fieldRef> <updates> ListItem ( update ipv4_checksum if ( ( ipv4 . ihl ) == 5 ) ; ) </updates> <verifies> ListItem ( verify ipv4_checksum if ( ( ipv4 . ihl ) == 5 ) ; ) </verifies> </calcField> </calcFields> <instances> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @val ( 1 , 32 , false ) egress_spec |-> @val ( 10 , 32 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> payload_t </typeName> <name> data </name> <fieldVals> data |-> @val ( 255 , 8 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmpv6_t </typeName> <name> inner_icmpv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> sctp_t </typeName> <name> inner_sctp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> inner_udp </name> <fieldVals> srcPort |-> @val ( 100 , 16 , false ) dstPort |-> @val ( 101 , 16 , false ) length_ |-> @val ( 768 , 16 , false ) checksum |-> @val ( 0 , 16 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> tcp_t </typeName> <name> inner_tcp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmp_t </typeName> <name> inner_icmp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> nsh_context_t </typeName> <name> nsh_context </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> nsh_t </typeName> <name> nsh </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_opt_C_t </typeName> <name> genv_opt_C </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_opt_B_t </typeName> <name> genv_opt_B </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_opt_A_t </typeName> <name> genv_opt_A </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_t </typeName> <name> genv </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vxlan_t </typeName> <name> vxlan </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> eompls_t </typeName> <name> eompls </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> arp_rarp_ipv4_t </typeName> <name> arp_rarp_ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> arp_rarp_t </typeName> <name> arp_rarp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> erspan_header_v2_t </typeName> <name> erspan_v2_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> erspan_header_v1_t </typeName> <name> erspan_v1_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> outer_udp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> outer_ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> outer_ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> inner_ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> inner_ipv4 </name> <fieldVals> identification |-> @val ( 0 , 16 , false ) ttl |-> @val ( 64 , 8 , false ) totalLen |-> @val ( 1024 , 16 , false ) srcAddr |-> @val ( 2147483649 , 32 , false ) hdrChecksum |-> @val ( 30443 , 16 , false ) protocol |-> @val ( 17 , 8 , false ) fragOffset |-> @val ( 0 , 13 , false ) version |-> @val ( 4 , 4 , false ) ihl |-> @val ( 5 , 4 , false ) flags |-> @val ( 0 , 3 , false ) diffserv |-> @val ( 0 , 8 , false ) dstAddr |-> @val ( 2147483649 , 32 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> inner_ethernet </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> nvgre_t </typeName> <name> nvgre </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> gre_t </typeName> <name> gre </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> sctp_t </typeName> <name> sctp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> roce_v2_header_t </typeName> <name> roce_v2 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> udp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> tcp_t </typeName> <name> tcp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmpv6_t </typeName> <name> icmpv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmp_t </typeName> <name> icmp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> mpls_bos </name> <fieldVals> bos |-> @val ( 1 , 1 , false ) label |-> @val ( 0 , 20 , false ) ttl |-> @val ( 1 , 8 , false ) tc |-> @val ( 0 , 3 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> $element ( mpls , 0 ) </name> <fieldVals> bos |-> @val ( 0 , 1 , false ) label |-> @val ( 0 , 20 , false ) ttl |-> @val ( 1 , 8 , false ) tc |-> @val ( 0 , 3 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> $element ( mpls , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> $element ( mpls , 2 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_5b_t </typeName> <name> $element ( vlan_tag_5b , 0 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_5b_t </typeName> <name> $element ( vlan_tag_5b , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_3b_t </typeName> <name> $element ( vlan_tag_3b , 0 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_3b_t </typeName> <name> $element ( vlan_tag_3b , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> vlan_tag_t </typeName> <name> $element ( vlan_tag_ , 0 ) </name> <fieldVals> vid |-> @val ( 2730 , 12 , false ) cfi |-> @val ( 0 , 1 , false ) pcp |-> @val ( 5 , 3 , false ) etherType |-> @val ( 37120 , 16 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> vlan_tag_t </typeName> <name> $element ( vlan_tag_ , 1 ) </name> <fieldVals> vid |-> @val ( 3003 , 12 , false ) cfi |-> @val ( 1 , 1 , false ) pcp |-> @val ( 5 , 3 , false ) etherType |-> @val ( 34887 , 16 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> cpu_header_t </typeName> <name> cpu_header </name> <fieldVals> pad1 |-> @val ( 5461 , 14 , false ) bridge_domain |-> @val ( 8738 , 16 , false ) qid |-> @val ( 0 , 3 , false ) reason_code |-> @val ( 0 , 12 , false ) etherType |-> @val ( 37120 , 16 , false ) ingress_lif |-> @val ( 13107 , 16 , false ) lu_bypass_ingress |-> @val ( 0 , 1 , false ) pad |-> @val ( 0 , 1 , false ) lu_bypass_egress |-> @val ( 1 , 1 , false ) egress_lif |-> @val ( 17476 , 16 , false ) rxhash |-> @val ( 4369 , 16 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> fcoe_header_t </typeName> <name> fcoe </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> roce_header_t </typeName> <name> roce </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> snap_header_t </typeName> <name> snap_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> dstAddr |-> @val ( 1103823438081 , 48 , false ) etherType |-> @val ( 36864 , 16 , false ) srcAddr |-> @val ( 2207646876162 , 48 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> input_port_hdr_t </typeName> <name> input_port_hdr </name> <fieldVals> port |-> @val ( 1 , 16 , false ) </fieldVals> </instance> </instances> <initInstances> <instances>-fragment <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @undef egress_spec |-> @undef </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> payload_t </typeName> <name> data </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmpv6_t </typeName> <name> inner_icmpv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> sctp_t </typeName> <name> inner_sctp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> inner_udp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> tcp_t </typeName> <name> inner_tcp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmp_t </typeName> <name> inner_icmp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> nsh_context_t </typeName> <name> nsh_context </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> nsh_t </typeName> <name> nsh </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_opt_C_t </typeName> <name> genv_opt_C </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_opt_B_t </typeName> <name> genv_opt_B </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_opt_A_t </typeName> <name> genv_opt_A </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> genv_t </typeName> <name> genv </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vxlan_t </typeName> <name> vxlan </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> eompls_t </typeName> <name> eompls </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> arp_rarp_ipv4_t </typeName> <name> arp_rarp_ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> arp_rarp_t </typeName> <name> arp_rarp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> erspan_header_v2_t </typeName> <name> erspan_v2_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> erspan_header_v1_t </typeName> <name> erspan_v1_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> outer_udp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> outer_ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> outer_ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> inner_ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> inner_ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> inner_ethernet </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> nvgre_t </typeName> <name> nvgre </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> gre_t </typeName> <name> gre </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> sctp_t </typeName> <name> sctp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> roce_v2_header_t </typeName> <name> roce_v2 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> udp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> tcp_t </typeName> <name> tcp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmpv6_t </typeName> <name> icmpv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmp_t </typeName> <name> icmp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> mpls_bos </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> $element ( mpls , 0 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> $element ( mpls , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> mpls_t </typeName> <name> $element ( mpls , 2 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_5b_t </typeName> <name> $element ( vlan_tag_5b , 0 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_5b_t </typeName> <name> $element ( vlan_tag_5b , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_3b_t </typeName> <name> $element ( vlan_tag_3b , 0 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_3b_t </typeName> <name> $element ( vlan_tag_3b , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_t </typeName> <name> $element ( vlan_tag_ , 0 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_t </typeName> <name> $element ( vlan_tag_ , 1 ) </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> cpu_header_t </typeName> <name> cpu_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> fcoe_header_t </typeName> <name> fcoe </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> roce_header_t </typeName> <name> roce </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> snap_header_t </typeName> <name> snap_header </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> input_port_hdr_t </typeName> <name> input_port_hdr </name> <fieldVals> .Map </fieldVals> </instance> </instances>-fragment </initInstances> <initArrays> vlan_tag_3b |-> $array ( 2 , 0 , -1 ) mpls |-> $array ( 3 , 0 , -1 ) vlan_tag_5b |-> $array ( 2 , 0 , -1 ) vlan_tag_ |-> $array ( 2 , 0 , -1 ) </initArrays> <parserStates> <state> <name> parse_payload </name> <body> ( extract ( data ) ; .ExtractOrSetStatements ) return ingress ; </body> </state> <state> <name> parse_inner_ethernet </name> <body> ( extract ( inner_ethernet ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( 0x0800 , .ValueOrMaskeds ) : parse_inner_ipv4 ;  ( ( 0x86dd , .ValueOrMaskeds ) : parse_inner_ipv6 ;  ( default : parse_payload ;  .CaseEntries ) ) } </body> </state> <state> <name> parse_inner_icmpv6 </name> <body> ( extract ( inner_icmpv6 ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_inner_ipv6 </name> <body> ( extract ( inner_ipv6 ) ; .ExtractOrSetStatements ) return select ( ( latest . nextHdr ) , .FieldOrDataRefs ) { ( 58 , .ValueOrMaskeds ) : parse_inner_icmpv6 ;  ( ( 6 , .ValueOrMaskeds ) : parse_inner_tcp ;  ( ( 17 , .ValueOrMaskeds ) : parse_inner_udp ;  ( default : parse_payload ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_inner_sctp </name> <body> ( extract ( inner_sctp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_inner_udp </name> <body> ( extract ( inner_udp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_inner_tcp </name> <body> ( extract ( inner_tcp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_inner_icmp </name> <body> ( extract ( inner_icmp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_inner_ipv4 </name> <body> ( extract ( inner_ipv4 ) ; .ExtractOrSetStatements ) return select ( ( latest . fragOffset ) , ( ( latest . protocol ) , .FieldOrDataRefs ) ) { ( 1 , .ValueOrMaskeds ) : parse_inner_icmp ;  ( ( 6 , .ValueOrMaskeds ) : parse_inner_tcp ;  ( ( 17 , .ValueOrMaskeds ) : parse_inner_udp ;  ( default : parse_payload ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_nsh </name> <body> ( extract ( nsh ) ; ( extract ( nsh_context ) ; .ExtractOrSetStatements ) ) return select ( ( nsh . protoType ) , .FieldOrDataRefs ) { ( 0x0800 , .ValueOrMaskeds ) : parse_inner_ipv4 ;  ( ( 0x86dd , .ValueOrMaskeds ) : parse_inner_ipv6 ;  ( ( 0x6558 , .ValueOrMaskeds ) : parse_inner_ethernet ;  ( default : parse_payload ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_genv_inner </name> <body> .ExtractOrSetStatements return select ( ( genv . protoType ) , .FieldOrDataRefs ) { ( 0x6558 , .ValueOrMaskeds ) : parse_inner_ethernet ;  ( ( 0x0800 , .ValueOrMaskeds ) : parse_inner_ipv4 ;  ( ( 0x86dd , .ValueOrMaskeds ) : parse_inner_ipv6 ;  ( default : parse_payload ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_geneve </name> <body> ( extract ( genv ) ; .ExtractOrSetStatements ) return parse_genv_inner ; </body> </state> <state> <name> parse_vxlan </name> <body> ( extract ( vxlan ) ; .ExtractOrSetStatements ) return parse_inner_ethernet ; </body> </state> <state> <name> parse_eompls </name> <body> ( extract ( eompls ) ; ( extract ( inner_ethernet ) ; .ExtractOrSetStatements ) ) return parse_payload ; </body> </state> <state> <name> parse_arp_rarp_ipv4 </name> <body> ( extract ( arp_rarp_ipv4 ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_arp_rarp </name> <body> ( extract ( arp_rarp ) ; .ExtractOrSetStatements ) return select ( ( latest . protoType ) , .FieldOrDataRefs ) { ( 0x0800 , .ValueOrMaskeds ) : parse_arp_rarp_ipv4 ;  ( default : parse_payload ;  .CaseEntries ) } </body> </state> <state> <name> parse_erspan_v2 </name> <body> ( extract ( erspan_v2_header ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_erspan_v1 </name> <body> ( extract ( erspan_v1_header ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_nvgre </name> <body> ( extract ( nvgre ) ; .ExtractOrSetStatements ) return parse_inner_ethernet ; </body> </state> <state> <name> parse_gre </name> <body> ( extract ( gre ) ; .ExtractOrSetStatements ) return select ( ( latest . K ) , ( ( latest . proto ) , .FieldOrDataRefs ) ) { ( 0x6558 , .ValueOrMaskeds ) : parse_nvgre ;  ( ( 0x88BE , .ValueOrMaskeds ) : parse_erspan_v1 ;  ( ( 0x22EB , .ValueOrMaskeds ) : parse_erspan_v2 ;  ( ( 0x894f , .ValueOrMaskeds ) : parse_nsh ;  ( default : parse_payload ;  .CaseEntries ) ) ) ) } </body> </state> <state> <name> parse_sctp </name> <body> ( extract ( sctp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_udp </name> <body> ( extract ( udp ) ; .ExtractOrSetStatements ) return select ( ( latest . dstPort ) , .FieldOrDataRefs ) { ( 4789 , .ValueOrMaskeds ) : parse_vxlan ;  ( ( 6081 , .ValueOrMaskeds ) : parse_geneve ;  ( ( 1021 , .ValueOrMaskeds ) : parse_roce_v2 ;  ( default : parse_payload ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_roce_v2 </name> <body> ( extract ( roce_v2 ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_tcp </name> <body> ( extract ( tcp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_icmpv6 </name> <body> ( extract ( icmpv6 ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_icmp </name> <body> ( extract ( icmp ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_ipv6 </name> <body> ( extract ( ipv6 ) ; .ExtractOrSetStatements ) return select ( ( latest . nextHdr ) , .FieldOrDataRefs ) { ( 58 , .ValueOrMaskeds ) : parse_icmpv6 ;  ( ( 6 , .ValueOrMaskeds ) : parse_tcp ;  ( ( 17 , .ValueOrMaskeds ) : parse_udp ;  ( ( 47 , .ValueOrMaskeds ) : parse_gre ;  ( default : parse_payload ;  .CaseEntries ) ) ) ) } </body> </state> <state> <name> parse_ipv4 </name> <body> ( extract ( ipv4 ) ; .ExtractOrSetStatements ) return select ( ( latest . fragOffset ) , ( ( latest . protocol ) , .FieldOrDataRefs ) ) { ( 1 , .ValueOrMaskeds ) : parse_icmp ;  ( ( 6 , .ValueOrMaskeds ) : parse_tcp ;  ( ( 17 , .ValueOrMaskeds ) : parse_udp ;  ( ( 47 , .ValueOrMaskeds ) : parse_gre ;  ( default : parse_payload ;  .CaseEntries ) ) ) ) } </body> </state> <state> <name> parse_mpls_bos </name> <body> ( extract ( mpls_bos ) ; .ExtractOrSetStatements ) return select ( current ( 0 , 4 ) , .FieldOrDataRefs ) { ( 0x4 , .ValueOrMaskeds ) : parse_inner_ipv4 ;  ( ( 0x6 , .ValueOrMaskeds ) : parse_inner_ipv6 ;  ( default : parse_eompls ;  .CaseEntries ) ) } </body> </state> <state> <name> parse_mpls_not_bos </name> <body> ( extract ( mpls [ next ] ) ; .ExtractOrSetStatements ) return parse_mpls ; </body> </state> <state> <name> parse_mpls </name> <body> .ExtractOrSetStatements return select ( current ( 23 , 1 ) , .FieldOrDataRefs ) { ( 1 , .ValueOrMaskeds ) : parse_mpls_bos ;  ( ( 0 , .ValueOrMaskeds ) : parse_mpls_not_bos ;  ( default : parse_payload ;  .CaseEntries ) ) } </body> </state> <state> <name> parse_vlan </name> <body> ( extract ( vlan_tag_ [ next ] ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( 0x8100 , ( 0x9100 , ( 0x9200 , ( 0x9300 , .ValueOrMaskeds ) ) ) ) : parse_vlan ;  ( ( 0x8847 , .ValueOrMaskeds ) : parse_mpls ;  ( ( 0x0800 , .ValueOrMaskeds ) : parse_ipv4 ;  ( ( 0x86dd , .ValueOrMaskeds ) : parse_ipv6 ;  ( ( 0x0806 , .ValueOrMaskeds ) : parse_arp_rarp ;  ( ( 0x8035 , .ValueOrMaskeds ) : parse_arp_rarp ;  ( default : parse_payload ;  .CaseEntries ) ) ) ) ) ) } </body> </state> <state> <name> parse_cpu_header </name> <body> ( extract ( cpu_header ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( ( 0 mask 0xf800 ) , .ValueOrMaskeds ) : parse_snap_header ;  ( ( 0x8100 , ( 0x9100 , ( 0x9200 , ( 0x9300 , .ValueOrMaskeds ) ) ) ) : parse_vlan ;  ( ( 0x8847 , .ValueOrMaskeds ) : parse_mpls ;  ( ( 0x0800 , .ValueOrMaskeds ) : parse_ipv4 ;  ( ( 0x86dd , .ValueOrMaskeds ) : parse_ipv6 ;  ( ( 0x0806 , .ValueOrMaskeds ) : parse_arp_rarp ;  ( ( 0x8035 , .ValueOrMaskeds ) : parse_arp_rarp ;  ( ( 0x894f , .ValueOrMaskeds ) : parse_nsh ;  ( ( 0x8915 , .ValueOrMaskeds ) : parse_roce ;  ( ( 0x8906 , .ValueOrMaskeds ) : parse_fcoe ;  ( default : parse_payload ;  .CaseEntries ) ) ) ) ) ) ) ) ) ) } </body> </state> <state> <name> parse_fcoe </name> <body> ( extract ( fcoe ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_roce </name> <body> ( extract ( roce ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_snap_header </name> <body> ( extract ( snap_header ) ; .ExtractOrSetStatements ) return parse_payload ; </body> </state> <state> <name> parse_ethernet </name> <body> ( extract ( ethernet ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( ( 0 mask 0xf800 ) , .ValueOrMaskeds ) : parse_snap_header ;  ( ( 0x9000 , ( 0x010c , .ValueOrMaskeds ) ) : parse_cpu_header ;  ( ( 0x8100 , ( 0x9100 , ( 0x9200 , ( 0x9300 , .ValueOrMaskeds ) ) ) ) : parse_vlan ;  ( ( 0x8847 , .ValueOrMaskeds ) : parse_mpls ;  ( ( 0x0800 , .ValueOrMaskeds ) : parse_ipv4 ;  ( ( 0x86dd , .ValueOrMaskeds ) : parse_ipv6 ;  ( ( 0x0806 , .ValueOrMaskeds ) : parse_arp_rarp ;  ( ( 0x8035 , .ValueOrMaskeds ) : parse_arp_rarp ;  ( ( 0x894f , .ValueOrMaskeds ) : parse_nsh ;  ( ( 0x8915 , .ValueOrMaskeds ) : parse_roce ;  ( ( 0x8906 , .ValueOrMaskeds ) : parse_fcoe ;  ( default : parse_payload ;  .CaseEntries ) ) ) ) ) ) ) ) ) ) ) } </body> </state> <state> <name> parse_input_port </name> <body> ( extract ( input_port_hdr ) ; .ExtractOrSetStatements ) return parse_ethernet ; </body> </state> <state> <name> start </name> <body> .ExtractOrSetStatements return parse_input_port ; </body> </state> </parserStates> <valueSets> .ValueSetCellBag </valueSets> <exceptionHandlers> .ExceptionHandlerCellBag </exceptionHandlers> <handledExceptions> .Set </handledExceptions> <statefuls> .StatefulCellBag </statefuls> <tableDirects> .Map </tableDirects> <actions> <action> <name> mark_forward </name> <params> .ParamList </params> <body> modify_field ( ( data . data ) , ( 255 , .Args ) ) ;  ( modify_field ( ( standard_metadata . egress_spec ) , ( 10 , .Args ) ) ;  .ActionStatements ) </body> </action> </actions> <actionProfiles> .ActionProfileCellBag </actionProfiles> <actionSelectors> .ActionSelectorCellBag </actionSelectors> <tables> <table> <name> mark_check </name> <reads> ( data . data ) : exact ;  .FieldMatchs </reads> <acts> actions { mark_forward ;  .ActionNameItems } </acts> <opts> .TableOptionals </opts> <rules> .List </rules> <default> @call ( mark_forward , $resolved ( .List ) ) </default> </table> </tables> <controlFlows> <control> <name> ingress </name> <body> apply ( mark_check ) { .HitMissCases }  .ControlStatements </body> </control> </controlFlows> <cfset> SetItem ( ingress ) </cfset> <calcFieldSet> SetItem ( ipv4 . hdrChecksum ) SetItem ( inner_ipv4 . hdrChecksum ) </calcFieldSet> <ctx> <frameStack> .List </frameStack> <crnt> "$table" |-> . "$action" |-> mark_forward "$miss" |-> true </crnt> </ctx> <packetpacket> <packetout> .List </packetout> <parser> <graph> <onpath> .Set </onpath> <marked> <mstates> SetItem ( parse_roce_v2 ) SetItem ( parse_inner_icmp ) SetItem ( parse_vlan ) SetItem ( parse_payload ) SetItem ( parse_tcp ) SetItem ( parse_mpls ) SetItem ( parse_nsh ) SetItem ( parse_gre ) SetItem ( parse_mpls_bos ) SetItem ( parse_erspan_v2 ) SetItem ( parse_cpu_header ) SetItem ( parse_snap_header ) SetItem ( parse_arp_rarp ) SetItem ( parse_ipv6 ) SetItem ( parse_inner_ipv6 ) SetItem ( parse_inner_ethernet ) SetItem ( parse_vxlan ) SetItem ( parse_erspan_v1 ) SetItem ( parse_inner_udp ) SetItem ( parse_icmpv6 ) SetItem ( parse_inner_icmpv6 ) SetItem ( parse_icmp ) SetItem ( start ) SetItem ( parse_udp ) SetItem ( parse_mpls_not_bos ) SetItem ( parse_eompls ) SetItem ( parse_roce ) SetItem ( parse_fcoe ) SetItem ( parse_nvgre ) SetItem ( parse_genv_inner ) SetItem ( parse_ethernet ) SetItem ( parse_ipv4 ) SetItem ( parse_inner_ipv4 ) SetItem ( parse_input_port ) SetItem ( parse_arp_rarp_ipv4 ) SetItem ( parse_inner_tcp ) SetItem ( parse_geneve ) </mstates> <mheaders> SetItem ( icmp ) SetItem ( eompls ) SetItem ( vxlan ) SetItem ( inner_tcp ) SetItem ( arp_rarp ) SetItem ( vlan_tag_ ) SetItem ( roce_v2 ) SetItem ( inner_icmpv6 ) SetItem ( icmpv6 ) SetItem ( mpls_bos ) SetItem ( nsh_context ) SetItem ( inner_ethernet ) SetItem ( ipv6 ) SetItem ( data ) SetItem ( inner_ipv4 ) SetItem ( arp_rarp_ipv4 ) SetItem ( erspan_v1_header ) SetItem ( udp ) SetItem ( gre ) SetItem ( ethernet ) SetItem ( roce ) SetItem ( fcoe ) SetItem ( nvgre ) SetItem ( mpls ) SetItem ( inner_icmp ) SetItem ( inner_udp ) SetItem ( nsh ) SetItem ( ipv4 ) SetItem ( input_port_hdr ) SetItem ( erspan_v2_header ) SetItem ( genv ) SetItem ( snap_header ) SetItem ( tcp ) SetItem ( inner_ipv6 ) SetItem ( cpu_header ) </mheaders> </marked> <dporder> ListItem ( input_port_hdr ) ListItem ( ethernet ) ListItem ( cpu_header ) ListItem ( fcoe ) ListItem ( roce ) ListItem ( vlan_tag_ ) ListItem ( arp_rarp ) ListItem ( arp_rarp_ipv4 ) ListItem ( ipv6 ) ListItem ( icmpv6 ) ListItem ( ipv4 ) ListItem ( gre ) ListItem ( nsh ) ListItem ( nsh_context ) ListItem ( erspan_v2_header ) ListItem ( erspan_v1_header ) ListItem ( nvgre ) ListItem ( udp ) ListItem ( roce_v2 ) ListItem ( genv ) ListItem ( vxlan ) ListItem ( tcp ) ListItem ( icmp ) ListItem ( mpls ) ListItem ( mpls_bos ) ListItem ( eompls ) ListItem ( inner_ethernet ) ListItem ( inner_ipv6 ) ListItem ( inner_icmpv6 ) ListItem ( inner_ipv4 ) ListItem ( inner_udp ) ListItem ( inner_tcp ) ListItem ( inner_icmp ) ListItem ( snap_header ) ListItem ( data ) </dporder> </graph> <pctx> <index> 600 </index> <lastExt> data </lastExt> <varWidth> . </varWidth> <packetSize> @val ( 75 , 0 , false ) </packetSize> </pctx> </parser> <buffer> <in> .List </in> <out> ListItem ( $packet ( ListItem ( @val ( 1 , 16 , false ) ) ListItem ( @val ( 1103823438081 , 48 , false ) ) ListItem ( @val ( 2207646876162 , 48 , false ) ) ListItem ( @val ( 36864 , 16 , false ) ) ListItem ( @val ( 0 , 3 , false ) ) ListItem ( @val ( 0 , 1 , false ) ) ListItem ( @val ( 0 , 12 , false ) ) ListItem ( @val ( 4369 , 16 , false ) ) ListItem ( @val ( 8738 , 16 , false ) ) ListItem ( @val ( 13107 , 16 , false ) ) ListItem ( @val ( 17476 , 16 , false ) ) ListItem ( @val ( 0 , 1 , false ) ) ListItem ( @val ( 1 , 1 , false ) ) ListItem ( @val ( 5461 , 14 , false ) ) ListItem ( @val ( 37120 , 16 , false ) ) ListItem ( @val ( 5 , 3 , false ) ) ListItem ( @val ( 0 , 1 , false ) ) ListItem ( @val ( 2730 , 12 , false ) ) ListItem ( @val ( 37120 , 16 , false ) ) ListItem ( @val ( 5 , 3 , false ) ) ListItem ( @val ( 1 , 1 , false ) ) ListItem ( @val ( 3003 , 12 , false ) ) ListItem ( @val ( 34887 , 16 , false ) ) ListItem ( @val ( 0 , 20 , false ) ) ListItem ( @val ( 0 , 3 , false ) ) ListItem ( @val ( 0 , 1 , false ) ) ListItem ( @val ( 1 , 8 , false ) ) ListItem ( @val ( 0 , 20 , false ) ) ListItem ( @val ( 0 , 3 , false ) ) ListItem ( @val ( 1 , 1 , false ) ) ListItem ( @val ( 1 , 8 , false ) ) ListItem ( @val ( 4 , 4 , false ) ) ListItem ( @val ( 5 , 4 , false ) ) ListItem ( @val ( 0 , 8 , false ) ) ListItem ( @val ( 1024 , 16 , false ) ) ListItem ( @val ( 0 , 16 , false ) ) ListItem ( @val ( 0 , 3 , false ) ) ListItem ( @val ( 0 , 13 , false ) ) ListItem ( @val ( 64 , 8 , false ) ) ListItem ( @val ( 17 , 8 , false ) ) ListItem ( @val ( 30443 , 16 , false ) ) ListItem ( @val ( 2147483649 , 32 , false ) ) ListItem ( @val ( 2147483649 , 32 , false ) ) ListItem ( @val ( 100 , 16 , false ) ) ListItem ( @val ( 101 , 16 , false ) ) ListItem ( @val ( 768 , 16 , false ) ) ListItem ( @val ( 0 , 16 , false ) ) ListItem ( @val ( 255 , 8 , false ) ) , 10 ) ) </out> </buffer> </T>
