<T> <k> @nextPacket </k> <headers> <header> <name> %standard_metadata_t </name> <opts> .Map </opts> <fields> egress_spec : 32 ( .FieldMods ) ;  ( egress_spec : 32 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> ingress_metadata_t </name> <opts> "$fixed_width" |-> 14 </opts> <fields> drop : 1 ( .FieldMods ) ;  ( egress_port : 9 ( .FieldMods ) ;  ( packet_type : 4 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> <header> <name> udp_t </name> <opts> "$fixed_width" |-> 64 </opts> <fields> srcPort : 16 ( .FieldMods ) ;  ( dstPort : 16 ( .FieldMods ) ;  ( length_ : 16 ( .FieldMods ) ;  ( checksum : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> tcp_t </name> <opts> "$fixed_width" |-> 160 </opts> <fields> srcPort : 16 ( .FieldMods ) ;  ( dstPort : 16 ( .FieldMods ) ;  ( seqNo : 32 ( .FieldMods ) ;  ( ackNo : 32 ( .FieldMods ) ;  ( dataOffset : 4 ( .FieldMods ) ;  ( res : 4 ( .FieldMods ) ;  ( flags : 8 ( .FieldMods ) ;  ( window : 16 ( .FieldMods ) ;  ( checksum : 16 ( .FieldMods ) ;  ( urgentPtr : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) ) </fields> </header> <header> <name> icmp_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> typeCode : 16 ( .FieldMods ) ;  ( hdrChecksum : 16 ( .FieldMods ) ;  .FieldDecs ) </fields> </header> <header> <name> ipv6_t </name> <opts> "$fixed_width" |-> 320 </opts> <fields> version : 4 ( .FieldMods ) ;  ( trafficClass : 8 ( .FieldMods ) ;  ( flowLabel : 20 ( .FieldMods ) ;  ( payloadLen : 16 ( .FieldMods ) ;  ( nextHdr : 8 ( .FieldMods ) ;  ( hopLimit : 8 ( .FieldMods ) ;  ( srcAddr : 128 ( .FieldMods ) ;  ( dstAddr : 128 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) </fields> </header> <header> <name> ipv4_t </name> <opts> "$fixed_width" |-> 160 </opts> <fields> version : 4 ( .FieldMods ) ;  ( ihl : 4 ( .FieldMods ) ;  ( diffserv : 8 ( .FieldMods ) ;  ( totalLen : 16 ( .FieldMods ) ;  ( identification : 16 ( .FieldMods ) ;  ( flags : 3 ( .FieldMods ) ;  ( fragOffset : 13 ( .FieldMods ) ;  ( ttl : 8 ( .FieldMods ) ;  ( protocol : 8 ( .FieldMods ) ;  ( hdrChecksum : 16 ( .FieldMods ) ;  ( srcAddr : 32 ( .FieldMods ) ;  ( dstAddr : 32 ( .FieldMods ) ;  .FieldDecs ) ) ) ) ) ) ) ) ) ) ) </fields> </header> <header> <name> vlan_tag_t </name> <opts> "$fixed_width" |-> 32 </opts> <fields> pcp : 3 ( .FieldMods ) ;  ( cfi : 1 ( .FieldMods ) ;  ( vid : 12 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) ) </fields> </header> <header> <name> ethernet_t </name> <opts> "$fixed_width" |-> 112 </opts> <fields> dstAddr : 48 ( .FieldMods ) ;  ( srcAddr : 48 ( .FieldMods ) ;  ( etherType : 16 ( .FieldMods ) ;  .FieldDecs ) ) </fields> </header> </headers> <arrays> .Map </arrays> <fieldLists> .FieldListCellBag </fieldLists> <fieldListCalcs> .FieldListCalcCellBag </fieldListCalcs> <calcFields> .CalcFieldCellBag </calcFields> <instances> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @val ( 0 , 32 , false ) egress_spec |-> @val ( 3 , 32 , false ) </fieldVals> </instance> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> ingress_metadata_t </typeName> <name> ing_metadata </name> <fieldVals> packet_type |-> @val ( 1 , 4 , false ) egress_port |-> @val ( 3 , 9 , false ) drop |-> @val ( 0 , 1 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmp_t </typeName> <name> icmp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> udp </name> <fieldVals> srcPort |-> @val ( 100 , 16 , false ) dstPort |-> @val ( 101 , 16 , false ) length_ |-> @val ( 16 , 16 , false ) checksum |-> @val ( 0 , 16 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> tcp_t </typeName> <name> tcp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> ipv4 </name> <fieldVals> identification |-> @val ( 0 , 16 , false ) ttl |-> @val ( 64 , 8 , false ) totalLen |-> @val ( 44 , 16 , false ) srcAddr |-> @val ( 16909060 , 32 , false ) hdrChecksum |-> @val ( 27733 , 16 , false ) protocol |-> @val ( 17 , 8 , false ) fragOffset |-> @val ( 101 , 13 , false ) version |-> @val ( 4 , 4 , false ) ihl |-> @val ( 5 , 4 , false ) flags |-> @val ( 0 , 3 , false ) diffserv |-> @val ( 0 , 8 , false ) dstAddr |-> @val ( 167772162 , 32 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_t </typeName> <name> vlan_tag </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> true </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> dstAddr |-> @val ( 187649984473770 , 48 , false ) etherType |-> @val ( 2048 , 16 , false ) srcAddr |-> @val ( 206414982921147 , 48 , false ) </fieldVals> </instance> </instances> <initInstances> <instances>-fragment <instance> <valid> true </valid> <metadata> true </metadata> <typeName> %standard_metadata_t </typeName> <name> standard_metadata </name> <fieldVals> ingress_port |-> @undef egress_spec |-> @undef </fieldVals> </instance> <instance> <valid> true </valid> <metadata> true </metadata> <typeName> ingress_metadata_t </typeName> <name> ing_metadata </name> <fieldVals> drop |-> @val ( 0 , 1 , false ) packet_type |-> @val ( 0 , 4 , false ) egress_port |-> @val ( 0 , 9 , false ) </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> icmp_t </typeName> <name> icmp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> udp_t </typeName> <name> udp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> tcp_t </typeName> <name> tcp </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv6_t </typeName> <name> ipv6 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ipv4_t </typeName> <name> ipv4 </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> vlan_tag_t </typeName> <name> vlan_tag </name> <fieldVals> .Map </fieldVals> </instance> <instance> <valid> false </valid> <metadata> false </metadata> <typeName> ethernet_t </typeName> <name> ethernet </name> <fieldVals> .Map </fieldVals> </instance> </instances>-fragment </initInstances> <initArrays> .Map </initArrays> <parserStates> <state> <name> parse_udp </name> <body> ( extract ( udp ) ; .ExtractOrSetStatements ) return ingress ; </body> </state> <state> <name> parse_tcp </name> <body> ( extract ( tcp ) ; .ExtractOrSetStatements ) return ingress ; </body> </state> <state> <name> parse_icmp </name> <body> ( extract ( icmp ) ; .ExtractOrSetStatements ) return ingress ; </body> </state> <state> <name> parse_ipv6 </name> <body> ( extract ( ipv6 ) ; .ExtractOrSetStatements ) return select ( ( latest . nextHdr ) , .FieldOrDataRefs ) { ( 0x01 , .ValueOrMaskeds ) : parse_icmp ;  ( ( 0x06 , .ValueOrMaskeds ) : parse_tcp ;  ( ( 0x11 , .ValueOrMaskeds ) : parse_udp ;  ( default : ingress ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_ipv4 </name> <body> ( extract ( ipv4 ) ; .ExtractOrSetStatements ) return select ( ( latest . fragOffset ) , ( ( latest . ihl ) , ( ( latest . protocol ) , .FieldOrDataRefs ) ) ) { ( ( 0x0000501 mask 0x0000fff ) , .ValueOrMaskeds ) : parse_icmp ;  ( ( ( 0x0000506 mask 0x0000fff ) , .ValueOrMaskeds ) : parse_tcp ;  ( ( ( 0x0000511 mask 0x0000fff ) , .ValueOrMaskeds ) : parse_udp ;  ( default : ingress ;  .CaseEntries ) ) ) } </body> </state> <state> <name> parse_vlan_tag </name> <body> ( extract ( vlan_tag ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( 0x0800 , .ValueOrMaskeds ) : parse_ipv4 ;  ( ( 0x86DD , .ValueOrMaskeds ) : parse_ipv6 ;  ( default : ingress ;  .CaseEntries ) ) } </body> </state> <state> <name> start </name> <body> ( extract ( ethernet ) ; .ExtractOrSetStatements ) return select ( ( latest . etherType ) , .FieldOrDataRefs ) { ( 0x8100 , ( 0x9100 , .ValueOrMaskeds ) ) : parse_vlan_tag ;  ( ( 0x0800 , .ValueOrMaskeds ) : parse_ipv4 ;  ( ( 0x86DD , .ValueOrMaskeds ) : parse_ipv6 ;  ( default : ingress ;  .CaseEntries ) ) ) } </body> </state> </parserStates> <valueSets> .ValueSetCellBag </valueSets> <exceptionHandlers> .ExceptionHandlerCellBag </exceptionHandlers> <handledExceptions> .Set </handledExceptions> <statefuls> .StatefulCellBag </statefuls> <tableDirects> .Map </tableDirects> <actions> <action> <name> send_packet </name> <params> .ParamList </params> <body> modify_field ( ( standard_metadata . egress_spec ) , ( ( ing_metadata . egress_port ) , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> mim_packet </name> <params> .ParamList </params> <body> modify_field ( ( ing_metadata . packet_type ) , ( 4 , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> mpls_packet </name> <params> .ParamList </params> <body> modify_field ( ( ing_metadata . packet_type ) , ( 3 , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> ipv6_packet </name> <params> .ParamList </params> <body> modify_field ( ( ing_metadata . packet_type ) , ( 2 , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> ipv4_packet </name> <params> .ParamList </params> <body> modify_field ( ( ing_metadata . packet_type ) , ( 1 , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> l2_packet </name> <params> .ParamList </params> <body> modify_field ( ( ing_metadata . packet_type ) , ( 0 , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> set_egress_port </name> <params> egress_port , .ParamList </params> <body> modify_field ( ( ing_metadata . egress_port ) , ( egress_port , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> _drop </name> <params> .ParamList </params> <body> modify_field ( ( ing_metadata . drop ) , ( 1 , .Args ) ) ;  .ActionStatements </body> </action> <action> <name> nop </name> <params> .ParamList </params> <body> .ActionStatements </body> </action> </actions> <actionProfiles> .ActionProfileCellBag </actionProfiles> <actionSelectors> .ActionSelectorCellBag </actionSelectors> <tables> <table> <name> set_egress </name> <reads> ( ing_metadata . drop ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( send_packet ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> ListItem ( $rule ( 4 , $ctr ( ListItem ( @val ( 0 , 0 , false ) ) ) , @call ( send_packet , $resolved ( .List ) ) ) ) ListItem ( $rule ( 5 , $ctr ( ListItem ( @val ( 1 , 0 , false ) ) ) , @call ( nop , $resolved ( .List ) ) ) ) </rules> <default> . </default> </table> <table> <name> icmp_check </name> <reads> ( icmp . typeCode ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( _drop ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> .List </rules> <default> . </default> </table> <table> <name> udp_check </name> <reads> ( udp . dstPort ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( _drop ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> ListItem ( $rule ( 7 , $ctr ( ListItem ( @val ( 170 , 0 , false ) ) ) , @call ( _drop , $resolved ( .List ) ) ) ) </rules> <default> . </default> </table> <table> <name> tcp_check </name> <reads> ( tcp . dstPort ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( _drop ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> .List </rules> <default> . </default> </table> <table> <name> l2_match </name> <reads> ( ethernet . dstAddr ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( set_egress_port ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> .List </rules> <default> . </default> </table> <table> <name> ipv6_match </name> <reads> ( ipv6 . dstAddr ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( set_egress_port ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> .List </rules> <default> . </default> </table> <table> <name> ipv4_match </name> <reads> ( ipv4 . dstAddr ) : exact ;  .FieldMatchs </reads> <acts> actions { nop ;  ( set_egress_port ;  .ActionNameItems ) } </acts> <opts> .TableOptionals </opts> <rules> ListItem ( $rule ( 6 , $ctr ( ListItem ( @val ( 167772162 , 0 , false ) ) ) , @call ( set_egress_port , $resolved ( ListItem ( @val ( 3 , 0 , false ) ) ) ) ) ) </rules> <default> . </default> </table> <table> <name> ethertype_match </name> <reads> ( ethernet . etherType ) : exact ;  .FieldMatchs </reads> <acts> actions { l2_packet ;  ( ipv4_packet ;  ( ipv6_packet ;  ( mpls_packet ;  ( mim_packet ;  .ActionNameItems ) ) ) ) } </acts> <opts> .TableOptionals </opts> <rules> ListItem ( $rule ( 0 , $ctr ( ListItem ( @val ( 2048 , 0 , false ) ) ) , @call ( ipv4_packet , $resolved ( .List ) ) ) ) ListItem ( $rule ( 1 , $ctr ( ListItem ( @val ( 34525 , 0 , false ) ) ) , @call ( ipv6_packet , $resolved ( .List ) ) ) ) ListItem ( $rule ( 2 , $ctr ( ListItem ( @val ( 33024 , 0 , false ) ) ) , @call ( mpls_packet , $resolved ( .List ) ) ) ) ListItem ( $rule ( 3 , $ctr ( ListItem ( @val ( 37120 , 0 , false ) ) ) , @call ( mim_packet , $resolved ( .List ) ) ) ) </rules> <default> @call ( l2_packet , $resolved ( .List ) ) </default> </table> </tables> <controlFlows> <control> <name> egress </name> <body> .ControlStatements </body> </control> <control> <name> ingress </name> <body> apply ( ethertype_match ) { ( ipv4_packet { apply ( ipv4_match ) { .HitMissCases }  .ControlStatements } )  ( ( ipv6_packet { apply ( ipv6_match ) { .HitMissCases }  .ControlStatements } )  ( ( mpls_packet { apply ( ipv6_match ) { .HitMissCases }  .ControlStatements } )  ( ( default { apply ( l2_match ) { .HitMissCases }  .ControlStatements } )  .ActionCases ) ) ) }  ( ( if ( valid ( tcp ) ) { apply ( tcp_check ) { .HitMissCases }  .ControlStatements } else { ( if ( valid ( udp ) ) { apply ( udp_check ) { .HitMissCases }  .ControlStatements } else { ( if ( valid ( icmp ) ) { apply ( icmp_check ) { .HitMissCases }  .ControlStatements } else { .ControlStatements } )  .ControlStatements } )  .ControlStatements } )  ( apply ( set_egress ) { .HitMissCases }  .ControlStatements ) ) </body> </control> </controlFlows> <cfset> SetItem ( ingress ) SetItem ( egress ) </cfset> <calcFieldSet> .Set </calcFieldSet> <ctx> <frameStack> .List </frameStack> <crnt> "$rule" |-> . "$table" |-> . "$action" |-> send_packet "$miss" |-> false </crnt> </ctx> <packet> "10101010101010101010101010101010101010101010101010111011101110111011101110111011101110111011101100001000000000000100010100000000000000000010110000000000000000000000000001100101010000000001000101101100010101010000000100000010000000110000010000001010000000000000000000000010000000000110010000000000011001010000000000010000000000000000000000000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111" </packet> <packetout> .List </packetout> <parser> <graph> <onpath> .Set </onpath> <marked> <mstates> SetItem ( parse_icmp ) SetItem ( start ) SetItem ( parse_udp ) SetItem ( parse_tcp ) SetItem ( parse_ipv6 ) SetItem ( parse_ipv4 ) SetItem ( parse_vlan_tag ) </mstates> <mheaders> SetItem ( ipv4 ) SetItem ( icmp ) SetItem ( vlan_tag ) SetItem ( ipv6 ) SetItem ( udp ) SetItem ( tcp ) SetItem ( ethernet ) </mheaders> </marked> <dporder> ListItem ( ethernet ) ListItem ( vlan_tag ) ListItem ( ipv6 ) ListItem ( ipv4 ) ListItem ( udp ) ListItem ( tcp ) ListItem ( icmp ) </dporder> </graph> <pctx> <index> 336 </index> <lastExt> udp </lastExt> <varWidth> . </varWidth> <packetSize> @val ( 58 , 0 , false ) </packetSize> </pctx> </parser> <buffer> <in> .List </in> <out> ListItem ( $packet ( ListItem ( @val ( 187649984473770 , 48 , false ) ) ListItem ( @val ( 206414982921147 , 48 , false ) ) ListItem ( @val ( 2048 , 16 , false ) ) ListItem ( @val ( 4 , 4 , false ) ) ListItem ( @val ( 5 , 4 , false ) ) ListItem ( @val ( 0 , 8 , false ) ) ListItem ( @val ( 44 , 16 , false ) ) ListItem ( @val ( 0 , 16 , false ) ) ListItem ( @val ( 0 , 3 , false ) ) ListItem ( @val ( 101 , 13 , false ) ) ListItem ( @val ( 64 , 8 , false ) ) ListItem ( @val ( 17 , 8 , false ) ) ListItem ( @val ( 27733 , 16 , false ) ) ListItem ( @val ( 16909060 , 32 , false ) ) ListItem ( @val ( 167772162 , 32 , false ) ) ListItem ( @val ( 100 , 16 , false ) ) ListItem ( @val ( 101 , 16 , false ) ) ListItem ( @val ( 16 , 16 , false ) ) ListItem ( @val ( 0 , 16 , false ) ) ListItem ( @val ( 5233100606242806050955395731361295 , 128 , false ) ) , 3 ) ) </out> </buffer> </T>
