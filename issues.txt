Questions about P4 Language Specification Version 1.0.3
http://p4.org/wp-content/uploads/2016/11/p4-spec-latest.pdf

- Page 59,
exp ::=
exp bin_op exp | un_op exp | field_ref |
value | ( exp )
What is value? Is it const_value?
RESOLVED(Nate Foster): const_value


- Page 27,
counter_declaration ::=
counter counter_name {
type : counter_type ;
[ direct_or_static ; ]
[ instance_count : const_expr ; ]
[ min_width : const_expr ; ]
[ saturating ; ]
}
meter_declaration ::=
meter meter_name {
type : meter_type ;
[ result : field_ref ; ]
[ direct_or_static ; ]
[ instance_count : const_expr ; ]
}
What is const_expr? Is it const_value?


- What is atomic? What happens if a new rule is received while processing a packet?
- What happens if during checking if while a rule is being checked for matching, a new rule is added to the table?
- Does packets get processed in parallel or sequentially? (it affects the semantics)

- How exactly unparsing works?

- Page 13
 field_list_declaration ::=
 field_list field_list_name {
 [ field_list_entry ; ] +
 }
 field_list_entry ::=
 field_ref | header_ref | field_value | field_list_name | payload
 field_ref ::= header_ref . field_name
 header_ref ::= instance_name | instance_name "[" index "]"
 index ::= const_value | last
 Does it mean we can have hdr [ last ] in field_list_declaration ?


- field_ref in functions (actions) is different from field_ref in other places such as field_list_dec or return select
  In the former, field_ref is actually reference to fields, in the later they are the value of the fields.
  Isn't this a bad thing?

- "Select functions take a comma-separated list of fields and concatenate their values,
  with the left-most field forming the most-significant bits of the concatenated value. The
  select operation then compares the values in the order they occur in the program to the
  entries to find a matching one."
  Does it mean we do the same thing (concatenation) with the match cases and then compare the values?

- Is it possible to extract and already extracted header?

- Page 21
  "The header reference latest refers to the most recently extracted header instance
   within the parse function. It is an error to reference latest without a preceding
   extract operation in the same function."
   What kind of error is it? Runtime or compile time?
   RESOLVED (figured out): it should be compile time

- Page 56
  Page 54
  action_specification ::=
  actions { [ action_name ] + }
  Shouldn't there be a semicolon?


- lpm: This is a special case of a ternary match. Each entryâ€™s mask selects a prefix by
  having a divide between 1s in the high order bits and 0s in the low order bits. The
  number of 1 bits gives the length of the prefix which is used as the priority of the
  entry.
  in table t {
    reads {
        h.f1 : lpm
        h.f2 : lpm
    }
    ...
  }
  How the table entries are given priorities?

- When exactly the arguments are evaluated? When primitive actions are called or when any action
 (including the compound actions are called)?
  When exactly the the type of the arguments are inferred?
  Is this possible to have something like this
  action a (x) {
    modify_field(x,10)
    modify_field(ethernet.dstAddr,x)
  }
  How about this ?
  action a (x){
    modify_field(x.dstAddr,10)
  }


- Page 53
  "...With parallel semantics, both actions are started at the same time..."
  Page 54
  "P4 assumes parallel semantics for the application of all the primitive actions executing
   as a result of a match in a given table."
   Does it mean the order of actions are not important?
   For example, what should be the result of:
   action a (){
     modify_field(ethernet.fieldA, 1);
     modify_field(ethernet.fieldA, 2);
   }
   or this (Assuming ethernet is initially invalid):
   action a(){
     add_header(ethernet[1]);
     add_header(ethernet[1]);
   }
   or this
   action a(){
     add_header(ethernet[1]);
     add_header(ethernet[2]);
   }
   Generally, any two actions that have overlapping effects.










